三层架构
表现层：WEB层，用来和客户端(浏览器)进行数据交互的。表现层一般会采用MVC的设计模型(Servlet、HTML、Spring、SpringMVC)
业务层：处理公司具体的业务逻辑的(Spring)
持久层：用来操作数据库的(JDBC、Mybatis、Spring)

SpringMVC是一种基于Java实现的MVC模型的轻量级Web框架（底层基于Spring，封装了web三大组件Servlet、Filter、Listener）
SpringMVC使用简单，开发便捷，灵活性强
一、SpringMVC架构
- Model（模型）：负责封装应用的状态，并实现应用的功能。通常分为：数据模型、业务逻辑模型
- View（视图）：页面视图，用于展示数据 （因为开发中前后端分离了，这块内容后端技术人员接触少了）
- Controller（控制器）：处理用户交互的调度器，用于根据用户需求处理程序逻辑

二、使用SpringMVC开发的步骤：

1. 导入坐标（SpringMVC依赖、Servlet依赖）
2. 创建SpringMVC控制器类UserController（等同于Servlet）
3. 初始化SpringMVC环境 SpringmvcConfig【没有web.xml文件、没有@WebServlet注解了】
4. 初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC请求拦截的路径,ServletContainerInitConfig

三、使用SPI(Service Provider Interface)机制创建Servlet
SPI是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。
  基于 “接口编程＋策略模式＋配置文件(约定)”组合实现的动态加载机制
1.约定的配置文件必须存放在META-INF/services目录下
2.特定的类加载器
java.util.ServiceLoader类 （类加载器）
ServiceLoader.load(Class cls) //示例：ServiceLoader.load(接口.class)
在ServiceLoader.load的时候，根据传入的接口类，遍历META-INF/services目录下的以该接口命名的文件中的所有类，并实例化返回

ServletContainerInitializer是Servlet3.0新增的一个接口，主要用于在web容器(Tomcat)启动阶段通过编程风格注册Filter、Servlet、Listener，
以取代通过web.xml配置注册。这样就利于开发内聚的web应用框架。



